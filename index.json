[{"authors":null,"categories":null,"content":"Тараканов Борис, родился в Иркутске, в данный момент учусь в Российском Университете Дружды народов, Москва. Основной род занятий - учеба.\nВ школьное время увкался робототехникой, в частности участвовал в соревнованиях FTC. В данны момент занимаюсь изучением игрового движка Unreal Engine 5 и 3D моделированием.\n  Download my resumé.\n","date":1653609600,"expirydate":-62135596800,"kind":"term","lang":"en","lastmod":1653609600,"objectID":"2525497d367e79493fd32b198b28f040","permalink":"","publishdate":"0001-01-01T00:00:00Z","relpermalink":"","section":"authors","summary":"Тараканов Борис, родился в Иркутске, в данный момент учусь в Российском Университете Дружды народов, Москва. Основной род занятий - учеба.\nВ школьное время увкался робототехникой, в частности участвовал в соревнованиях FTC.","tags":null,"title":"Тараканов Борис","type":"authors"},{"authors":[],"categories":null,"content":" Click on the Slides button above to view the built-in slides feature.   Slides can be added in a few ways:\n Create slides using Wowchemy’s Slides feature and link using slides parameter in the front matter of the talk file Upload an existing slide deck to static/ and link using url_slides parameter in the front matter of the talk file Embed your slides (e.g. Google Slides) or presentation video on this page using shortcodes.  Further event details, including page elements such as image galleries, can be added to the body of this page.\n","date":1906549200,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1906549200,"objectID":"a8edef490afe42206247b6ac05657af0","permalink":"https://example.com/talk/example-talk/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/talk/example-talk/","section":"event","summary":"An example talk using Wowchemy's Markdown slides feature.","tags":[],"title":"Example Talk","type":"event"},{"authors":null,"categories":null,"content":"Проект одноименной игры, в данный момент находится на начальном этапе разработки.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"e8f8d235e8e7f2efd912bfe865363fc3","permalink":"https://example.com/project/example/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/project/example/","section":"project","summary":"An example of using the in-built project page.","tags":["UE","GameDev"],"title":"Project Citadel","type":"project"},{"authors":["Тараканов Борис","4ebupelinka"],"categories":["UE"],"content":"Что такое файл конфигурации? Файлы конфигурации - текстовые файлы, содержащие настройки свойств для настройки игрового процесса или поведения движка.\nДля чего используют файлы конфигурации? Файлы конфигурации можно использовать для установки значений свойств, которые будут инициализированы при загрузке проекта. Конфигурация определяется парами ключ-значение, расположенными в разделах. Одно или несколько значений могут быть связаны с данным ключом.\nФайлы конфигурации механизма используются для значений объектов и переменных по умолчанию. Конфигурация пользовательского ввода может использоваться для привязки клавиш. По умолчанию файлы DefaultEngine.ini и DefaultGame.ini создаются при создании нового пустого проекта с помощью Мастера проектов . Новые проекты, начинающиеся с шаблонов, могут также создавать файлы конфигурации DefaultEditor.ini и DefaultInput.ini, если это необходимо.\nУказание настраиваемых переменных: Чтобы указать, какие переменные следует считывать из файлов конфигурации, класс, содержащий эти переменные, должен сначала получить спецификатор Config в своем макросе UCLASS.\nУкрашение класса спецификатором Config просто указывает, что этот класс может иметь переменные, считанные из файлов конфигурации, и указывает, из каких файлов считываются конфигурации. Чтобы указать конкретную переменную как прочитанную и сохраненную в файле конфигурации, спецификатор Config также должен быть предоставлен макросу UPROPERTY().\nФайлы конфигурации и наследование: Спецификаторы Config, UCLASS и UPROPERTY наследуются. Это означает, что дочерний класс может либо считывать, либо сохранять все переменные, указанные как Config в родительском классе, и они будут в той же категории файла конфигурации. Все переменные будут находиться под заголовком раздела с именем дочернего класса. Например, информация файла конфигурации для ChildExampleClass, который наследуется от приведенного выше класса ExampleClass, будет выглядеть как следующие строки и сохраняться в тех же файлах конфигурации игры.\nКонфигурации для каждого экземпляра: Каждая категория конфигурации имеет свою собственную иерархию файлов, в которых указаны конфигурации для конкретного движка, проекта и платформы.\nКатегории конфигурации:\n Compat DeviceProfiles Editor EditorGameAgnostic EditorKeyBindings EditorUserSettings Engine Game Input Lightmass Scalability  Иерархия файлов: Иерархия файла конфигурации считывается, начиная с Base.ini, при этом значения в более поздних файлах иерархии переопределяют более ранние значения. Все файлы в папке Engine будут применяться ко всем проектам, а настройки для конкретных проектов должны находиться в файлах в каталоге проекта. Наконец, все различия, специфичные для проекта и платформы, сохраняются в [ProjectDirectory]/Saved/Config/[Platform]/[Category].ini.\nПриведенный ниже пример файловой иерархии относится к категории файлов конфигурации Engine.\n Engine/Config/Base.ini Engine/Config/BaseEngine.ini Engine/Config/[Platform]/base[Platform]Engine.ini [ProjectDirectory]/Config/DefaultEngine.ini Engine/Config/[Platform]/[Platform]Engine.ini [ProjectDirectory]/Config/[Platform]/[Platform]Engine.ini  Комментарии: У большинства людей сложилось впечатление, что точка с запятой обозначает комментарии в файлах конфигурации, но это не так (FConfigFile::ProcessInputFileContents на самом деле не рассматривает их или любую другую строку как разделитель комментариев). Такое поведение является преднамеренным. Технически любой символ может представлять другую пару ключ-значение. Обычно точка с запятой ставится в начале новой строки. Это работает как комментарий, но на самом деле это не так.\nИтоги работы По итогу работы я познакомился с файлами конфигурации и методами работы с ними.\nLicense Copyright 2022-present Борис Тараканов.\nReleased under the MIT license.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"2f53256a5ea675d6c614dda5ae446c68","permalink":"https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-4/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-4/","section":"post","summary":"Прошедшую неделю я посветил изучению файлов конфигурации в контексте игрового движка Unreal Engine.","tags":["UE5","GameDev"],"title":"Пост по прошлой неделе","type":"post"},{"authors":["Тараканов Борис","4ebupelinka"],"categories":["Study"],"content":"Теория и практика: В математике, как и в любой другой науке, любые теоремы и теории требуют доказательств. Как пример: Теорема Пифагора. Сначала идет теория, а за ней практика. В программировании такого подхода не придерживаются уже несколько десятков лет. Всё заменено догмами и мнением отдельных личностей, которых иногда называют «евангелистами» или «пророками». Они своим словоблудием продвигают в массы только нужные им идеи, не заботясь ни о теории, ни о доказательствах (Посмотрите конференции и презентации по ИТ). Где здесь наука, а где религия? И не скатываемся ли мы в мракобесие и веру в слова написанные давно и не требующих доказательств? Слышали про сторонников плоской Земли? Ничего не напоминает по части подходов по убеждению и упоротости?\nИ вот в таком кураже последние 30-40 лет программисты, ослепленные религиозными убеждениями от проповедников ООП или ФП, строили абстракции поверх других абстракций, новые языки поверх других языков, новые фреймворки и библиотеки поверх старых. А зачем это все было нужно? Ради упрощения и производительности своей работы по написанию программ. Только этот путь привел в тупик. Потому что вместо упрощения получили усложнение и изучение теперь не алгоритмов, а API и документации к очередному модному фреймворку, а может и нескольким. Теперь баги стали искать не только в своем коде, но и в чужом. Отладку кода приходится делать через тонны прокси, паттернов архитектуры и шаблонов проектирования, хелперов, фреймворков и библиотек. И, как показывают исследования, выигрыша в скорости написания кода от применения ООП нет вообще.\nНемного истории: С чего всё началось? Сначала было процедурное программирование, затем структурное и за ним на сцену вышло императивное программирование. Некоторые люди додумались ввести понятие объекта — так родилось обьектно-ориентированное программирование. И в этот момент произошел крутой поворот повернувший всю индустрию в то состояние, в котором мы сейчас находимся.\nПримеры научного подхода:   книга «Электронные цифровые машины и программирование» А.И. Китова.\n  теорема Бёма — Якопини.\n  Не так много как хотелось бы, и, возможно, где-то есть еще много примеров научных работ, но их найти очень сложно. Подавляющее большинство пользуется всякими «библиями» и статьями для аргументации и дискуссий(в реальности это даже слишком громкое слово для этого процесса).\nВыводы Языки научного программирования остаются не просто актуальными, но и востребованными в наше непростое время.\nLicense Copyright 2022-present Борис Тараканов.\nReleased under the MIT license.\n","date":1653609600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1653609600,"objectID":"cb514bfcc7e97980857a61f64cb6d30a","permalink":"https://example.com/post/%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8-%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/","publishdate":"2022-05-27T00:00:00Z","relpermalink":"/post/%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8-%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/","section":"post","summary":"Давным-давно идут «священные войны» в которых обсуждаются и критикуются различные подходы в написании программ и в самом программировании, критикуется в основном Объектно-Ориентированное Программирование.","tags":["Программирование"],"title":"Языки научного программирования.","type":"post"},{"authors":["Тараканов Борис","4ebupelinka"],"categories":["UE"],"content":"О виджетах: Виджет (widget) — это элемент UI, предоставляющий UI визуальные функции. Например, виджет Button предоставляет объект, который пользователь может видеть и нажимать на него. Сам виджет необязательно должен быть видимым. Например, виджет Grid Panel равномерно разделяет своё пространство между его содержимым. Пользователь не может увидеть Grid Panel, но видит его воздействие. Можно даже создать виджет, являющийся целым интерфейсом, например, экраном меню. Ниже представлен пример виджета, созданного так, чтобы он выглядел как начальный экран игры. Все элементы UI тоже являются виджетами и содержатся внутри виджета начального экрана.\nСоздание виджета: Перейдем в Content Browser и найдем папку UI. Нажмем на кнопку Add New и выберем User Interface\\Widget Blueprint. Переименуем новый ассет в WBP_HUD.\nUMG UI Designer: UMG UI Designer состоит из семи основных элементов:\n Designer: в этой области представлено визуальное отображение виджета. Перемещаться по ней можно зажав правую клавишу мыши и двигая мышью. Масштабирование выполняется прокруткой колёсика мыши. Details: здесь отображаются свойства выбранного виджета Palette: список всех виджетов, которые можно использовать. Все созданные пользователем виджеты тоже появляются здесь. Hierarchy: список всех уже используемых виджетов Animations: некоторые свойства виджетов могут иметь анимацию, например, расположение и размер. В этой панели перечислены все анимации. Timeline: при выборе анимации на этой панели показываются анимированные свойства и ключевые кадры Editor Mode: здесь можно переключаться между режимами Designer и Graph. Режим Graph почти аналогичен Event Graph у Blueprint.  Привязки: Точка привязки задаёт место, относительно которого определяется положение виджета. По умолчанию виджеты привязаны к верхнему левому углу своего родительского элемента. Поэтому когда мы задаём положение виджета, мы на самом деле указывает положение относительно этой точки привязки. Заметьте, что каждое изображение сохраняет положение относительно своей привязки. Благодаря привязкам UI будет иметь одинаковое расположение при разных размерах экрана. Также можно использовать привязки для автоматического изменения размера виджетов. В случае привязки к двум или более точкам виджет будет менять свой размер для сохранения относительного размера.\nОтображение HUD: Нажмем на Compile, а затем вернемся в основной редактор. Перейдем в папку Blueprints и дважды щёлкнем на BP_GameManager, чтобы открыть его. HUD должен становиться видимым после запуска игры. Для этого можно использовать нод Event BeginPlay. Найдем нод Event BeginPlay и добавим нод Create Widget в конец цепочки нодов. Этот нод создаёт экземпляр указанного виджета. Нажмем на раскрывающийся список рядом с Class и выберем WBP_HUD.\nДавайте разберёмся с порядком событий:\n Когда Unreal спаунит BP_GameManager, выполняются функции Restart и SetUpCamera. Эти функции настраивают несколько переменных и камеру. Если вы не знаете, что такое функция, то не волнуйтесь, скоро мы их рассмотрим. Нод Create Widget создаёт экземпляр WBP_HUD Нод Add to Viewport отображает WBP_HUD  Итоги работы По итогам работы я научился следующему:\n Создавать HUD-дисплей, на котором отображается счётчик и таймер Отображать HUD на экране Обновлять счётчик и таймер, чтобы отображать значения переменных  License Copyright 2022-present Борис Тараканов.\nReleased under the MIT license.\n","date":1652918400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652918400,"objectID":"71c6540e103a7ceeb0f647b71843acf7","permalink":"https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-3/","publishdate":"2022-05-19T00:00:00Z","relpermalink":"/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-3/","section":"post","summary":"Разработчики видеоигр используют графику и текст для отображения необходимой информации, например, здоровья или очков. Это называется интерфейсом пользователя (user interface, UI).","tags":["UE5","GameDev"],"title":"Пост по прошлой неделе","type":"post"},{"authors":["Тараканов Борис","4ebupelinka"],"categories":["Study"],"content":"Самые частые ошибки выступающих:   Говорить о себе. Кажется, что чем больше выставить наград, тем весомее будет презентация. Но это не так — сплошные регалии и достижения только утомляют. Расскажите о себе ровно столько, чтобы люди поняли, почему вам можно доверять.\n  Навязчивость. Чтобы привлечь внимание, в ход идут пошлые картинки и мемы. Да, секс и коты привлекают, но то ли это внимание, которое вам нужно? Лучше будьте конкретны: цифры, графики и изображения продукта привлекают не меньше и к тому же точнее раскрывают тему. Если работаете на сцене, возьмите с собой что-то интересное. Например, Стив Джобс как-то вынес на сцену конверт, в котором оказался Macbook Air.\n  «Я хочу вас развлечь». Дальше обычно идет забавная история и шутки. Но это тупо и не работает на тему. Лучше пообещайте аудитории что-то весомое, расскажите, какие новые знания и умения они получат к концу выступления. После такого обещания люди станут внимательнее, потому что им действительно хочется получить обещанное.\n  Правило третей Это правило создания презентаций помогает расположить объекты на слайде так, чтобы глаз сразу выделял самое важное. Разделите слайд на трети вдоль и поперек. Значимые объекты располагайте на пересечениях. Значимые объекты — это заголовки и иллюстрации.\nЗачем делать презентации? Презентации делают не только менеджеры на совещаниях. Это полезный навык, который помогает продать, убедить и научить. С помощью них стартаперы соблазняют инвесторов, агенты презентуют актеров, а няни самих себя. Красивая презентация — это сильный инструмент с долгосрочным эффектом. Хорошую речь помнят, а хорошую презентацию хранят на компьютере.\nВыводы создание презентаций является неотъемлимой частью проектной деятельности, и, зачатую, от качества презентации зависит результат всей работы.\nLicense Copyright 2022-present Борис Тараканов.\nReleased under the MIT license.\n","date":1652918400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652918400,"objectID":"02c740af12884083cfd2e414c5541109","permalink":"https://example.com/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/","publishdate":"2022-05-19T00:00:00Z","relpermalink":"/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/","section":"post","summary":"Отличить хорошую презентацию очень просто, она помогает удержать внимание слушателей. В плохой презентации все в кучу, глаза разбегаются по ярким слайдам, мозг пытается обработать текст, а в это время спикер что-то бормочет о своем.","tags":["Презентации"],"title":"Создание презентаций","type":"post"},{"authors":["Тараканов Борис","4ebupelinka"],"categories":["UE"],"content":"Что такое WM? World Machine помогает создавать реалистичные 3D-рельефы. Мощная и гибкая программа World Machine сочетает процедурное создание рельефа, моделирование природы и интерактивное редактирование для быстрого и простого создания реалистичного рельефа. Вы можете создавать и экспортировать поля высот, текстуры и сетки высокого разрешения для игр или программ рендеринга.\nПочему именно WM? Несмотря на то что игровой движок, который я использую, имеет встроенные средства для создания и редактирования ландшафта, они подразумевают использование вручную, что неэффективно в контексте создания цельного игрового мира, имеющего размеры порядка 60 квадратных километров. Так же имеются программы аналогичные данной, но WM является наиболее узнаваемой, в силу чего для нее легче найти инструкции по использованию.\nКак это устроено? В отличие от традиционных редакторов рельефа на основе кистей, World Machine использует процедурный подход. Формируйте рельеф, используя основные строительные блоки, такие как фракталы, затем дополните их симуляцией природы, чтобы создать реалистичные черты. Просто соедините вместе блоки действий, чтобы создать свой мир. Вот великолепный пейзаж, созданный менее чем за две минуты.\nИтоги работы За прошлую неделю я изучил основные возможности программы World Machine, в том числе:\n Использование нод шума для создания основы ландшафта Использование инструмента Layout Generator Использование инструментов: эррозия, кривые, комбинирование, фильтры. Экспорт карт высот и текстур в заданном разрешении  License Copyright 2022-present Борис Тараканов.\nReleased under the MIT license.\n","date":1652486400,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652486400,"objectID":"9a9c9a25b3b8e68b2c5bb7804ab9a5ea","permalink":"https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-2/","publishdate":"2022-05-14T00:00:00Z","relpermalink":"/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-2/","section":"post","summary":"Прошлую неделю я посвятил изучению программы World Machine (WM), которую я планирую использовать для генерации террейна для своего будущего проекта.","tags":["UE5","GameDev","World Machine"],"title":"Пост по прошлой неделе","type":"post"},{"authors":["Тараканов Борис","4ebupelinka"],"categories":["Study"],"content":"История Первоначально создан в 2004 году Джоном Грубером и Аароном Шварцем. Многие идеи языка были позаимствованы из существующих соглашений по разметке текста в электронных письмах. Реализации языка Markdown преобразуют текст в формате Markdown в валидный, правильно построенный XHTML и заменяют левые угловые скобки («\u0026lt;») и амперсанды («\u0026amp;») на соответствующие коды сущностей. Первой реализацией Markdown стала написанная Грубером реализация на Perl, однако спустя некоторое время появилось множество реализаций от сторонних разработчиков (см. ниже). Реализация на Perl распространяется по лицензии типа BSD. Реализации Markdown на различных языках программирования включены (или доступны в качестве плагина) во многие системы управления содержимым.\nРеализации Markdown  C# C ColdFusion Common Lisp Go Haskell Java JavaScript Kotlin Lua newLISP Perl PHP Python Ruby Scala Tcl  Расширения Приведённые ниже приложения реализуют Markdown, расширяя его синтаксис дополнительной функциональностью:\n MultiMarkdown (C) Text::MultiMarkdown (Perl) модуль, реализующий расширение MultiMarkdown PHP Markdown Extra python-markdown2 (Поддерживает некоторые расширения PHP Markdown) python-markdown (Имеет систему расширений для добавления нового синтаксиса) Markout (Java) Pegdown (Java) Maruku (Ruby) Pandoc (Haskell)  Поддержка текстовыми редакторами:  Универсальные редакторы: TextMate, BBEdit (с версии 8.6), Vim (с помощью специального пользовательского режима, написанного Беном Вильямсом), Emacs(с помощью специального пользовательского режима, написанного Джейсоном Блевинсом), TextWrangler, Smultron, Sublime Text, Geany, Atom, Visual Studio Code. Редакторы для блогов: Ecto, MarsEdit Плагины для редактора среды Eclipse от ThinkTank Mathematics Плагины для текстового редактора gedit Текстовый редактор iA Writer в версии для Mac OS и Android Текстовый редактор ReText для GNU/Linux WYSIWYM-редактор Texts для Windows/Mac OS WYSIWYM-редактор Typora для Windows, GNU/Linux и Mac OS  License Copyright 2022-present Борис Тараканов.\nReleased under the MIT license.\n","date":1652400060,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1652400060,"objectID":"bd238f54b82fdcd586f8f7e438599565","permalink":"https://example.com/post/markdown/","publishdate":"2022-05-13T00:01:00Z","relpermalink":"/post/markdown/","section":"post","summary":"Занимаясь разработкой, вы наверняка сталкивались с понятиями непрерывной интеграции, доставки и развертывания (или CI/CD). Это технологии, позволяющие ускорить процесс выпуска ПО за счет более коротких циклов обратной связи и автоматизации рутинных задач. Они играют ключевую роль в реализации принципа Agile о важности частого выпуска работающего ПО.","tags":["Markdown"],"title":"Markdown","type":"post"},{"authors":["Тараканов Борис","4ebupelinka"],"categories":["UE"],"content":"Что такое RVT? Runtime Virtual Texture (RVT) создает свои текстурные данные по требованию с помощью GPU во время выполнения и работает аналогично традиционному текстурированию. RVT кэширует данные о затенении на больших площадях, что делает их подходящими для затенения ландшафта, где используются материалы, похожие на декали, и сплайны, которые хорошо подходят для соответствия рельефу.\nДля настройки и использования виртуального текстурирования среды выполнения в проекте выполните следующие высокоуровневые действия: :   Создайте виртуальный текстурный ресурс (ы) среды выполнения в браузере содержимого. Он используется для связи всех компонентов (актеров, тома RVT и материалов RVT) вместе для рендеринга виртуальной текстуры среды выполнения.\n  Добавьте виртуальный текстурный том среды выполнения в сцену с панели Режимы. Это используется для размещения актива RVT в сцене.\n  Настройте свои материалы для записи в ресурс RVT.\n  Настройте материалы для отбора проб из актива RVT.\n  Настройте один или несколько примитивов или ландшафтных актеров для рендеринга в актив RVT.\n  Зачем нужны виртуальные текстуры реального времени? Данный вид текстур используется в частности для создание правдоподобного окружения в игровом мире, так как позволяет сгладить преход можду текступой ланшафта и текстурой объекта, например камня. Так же виртруальные текстуры реального времени можно использовать для создания поверхности ланшафта, реагируещей на другие объекты (например снег, который приминается под ногой игрового персоонажа), использование именно метода RVT для данной задачи, является выигрышным со стороны производиительности, потому что не создается полигональная сетка высокой плотности, нагружающая систему, а взаимодействие происходит на уровне ландшафта.\nИтоги работы Мне удалось создать и настроить RVT для создания правдоподобного окружения(Плавный переход текстуры ландшафта в текстуру камня, зозданного методом 3D сканирования), в будущем я планирую использовать RVT для создания ландшафтного материала, реагирующего на действия игрока, в частности снег и грязь.\nLicense Copyright 2022-present Борис Тараканов.\nReleased under the MIT license.\n","date":1651881600,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651881600,"objectID":"845988bcbe36d57b85e475e3c6324953","permalink":"https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-1/","publishdate":"2022-05-07T00:00:00Z","relpermalink":"/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-1/","section":"post","summary":"Прошлую неделю я посвятил изучению виртуальных текстур (RVT) в контексте ланшафта (Landscape), в игровом движке Unreal Engine","tags":["UE5","GameDev","RVT"],"title":"Пост по прошлой неделе","type":"post"},{"authors":["Тараканов Борис","4ebupelinka"],"categories":["Study"],"content":"Что такое непрерывная интеграция? Непрерывная интеграция подразумевает выполнение традиционных шагов по интеграции прямо в ходе процесса разработки — не дожидаясь завершения работы над кодом, сбора всей системы воедино и тестирования.\nПредположим, что над разработкой вашего продукта работает больше одного человека — это типично для большинства коммерческого ПО и проектов с открытым исходным кодом. В какой-то момент вы захотите собрать по кусочкам все, над чем трудились ваши разработчики, и проверить, что конечный результат соответствует ожиданиям. Непрерывная интеграция предполагает, что это происходит раз в день, а то и чаще.\nИ ясно почему. Если вы отложите интеграцию до момента готовности кода, то, чтобы собрать решение (и тем более — достичь желаемой работоспособности), вам скорей всего придется долго раскраивать и переписывать различные фрагменты кода. Код — вещь сложная. Даже если он тщательно продуман заранее, вы едва ли будете знать наверняка, как выстроится логическое взаимодействие и будут ли ошибки. Чем больше кода, тем выше сложность и тем больше всего приходится раскраивать, когда что-то не работает.\nС непрерывной интеграцией разработчики регулярно публикуют свои изменения, делая коммиты в систему контроля версий хотя бы раз в день, и проверяют, что сборка с их изменениями проходит все тесты. В таком случае, если что-то сломается, для нахождения проблемы вам нужно будет проанализировать небольшое количество изменений. Быстрое получение результатов также означает, что вам будет легче вносить исправления: контекст задачи будет по-прежнему свеж в голове.\nО непрерывной доставке: Непрерывная доставка основывается на автоматизации сборки и тестирования, которую вводит непрерывная интеграция. Она предполагает перевод ручных шагов, необходимых для выпуска сборки приложения в продакшн, — в автоматизированный процесс.\nРаньше работа могла передаваться от разработчиков тестировщикам, а затем релиз-менеджерам. Внедряя непрерывную доставку, ваша команда (включающая самых разных специалистов) начинает полностью управлять процессами сборки, тестирования и релиза своего продукта. У такого подхода есть ряд преимуществ:\nИзбегая традиционной разобщенности, ваша команда будет лучше понимать бизнес-потребности и операционные нужды, возникающие при доставке продукта пользователям. Это в свою очередь позволяет привнести некоторые практики разработки в процесс, который принято считать ручным и довольно длительным. Применение автоматизации не только ускоряет процесс доставки, но и снижает вероятность возникновения ошибок, делая его более стабильным и надежным.\nТо, из каких шагов состоит процедура доставки приложения и каких стадий пайплайна они требуют, зависит от нужд вашего бизнеса и пользователей. Распространенной практикой является развертывание приложения хотя бы в одном препродакшн-окружении перед окончательным выпуском.\nЭто может быть тестовое окружение, предназначенное для дополнительных видов тестирования (безопасности, производительности, нагрузки); это могут быть песочницы (изолированные среды), с помощью которых команды поддержки и продаж знакомятся с новой функциональностью; также это могут быть окружения для приемочного тестирования, где QA-команда и специалисты по продукту проверяют ПО на соответствие требованиям.\nО непрерывном развертывании: Непрерывное развертывание завершает логическую цепочку из практик непрерывной интеграции и доставки: если сборка успешно проходит все предыдущие стадии пайплайна, она автоматически выпускается в продакшн. А значит, как только выполненные изменения проходят все тесты, — они становятся доступными для пользователя. Непрерывное развертывание ускоряет цикл обратной связи, начинающийся с изменений в коде и заканчивающийся поступлением их в продакшн, и дает команде возможность своевременно проверять, как их изменения поведут себя в реальном мире, не рискуя качеством.\nНепрерывное развертывание подойдет не любому продукту и не любой организации. Однако имеет смысл рассмотреть шаги, которые оно включает, поскольку каждый из них способен нести ценность сам по себе:\n  Будьте уверены в своих тестах. Для автоматического развертывания в продакшне вы должны быть твердо уверенными в вашем пайплайне, в частности, в автоматизированных тестах. Необходима культура тестирования, где команда инвестирует в тестовое покрытие и производительность, отдает более высокий приоритет исправлению проблем сборок и пайплайнов, а уж потом занимается разработкой новой функциональности.\n  Выбирайте, что релизить. Новички часто возражают, что, если разработчики будут делать коммиты рано и часто и изменения не будут проверяться вручную, то пользователи будут получать недоделанную функциональность, которая еще не готова к использованию. Чтобы не упускать преимущества непрерывной интеграции, вместо веток вы можете использовать флаги функций. Так вы сможете контролировать, какие возможности видны пользователю, а какие скрыты, и спокойно продолжать разработку.\n  Контролируйте выпуск. Непрерывное развертывание …","date":1651795260,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1651795260,"objectID":"9e09c01627c1e4be7aa7f052f7f9698b","permalink":"https://example.com/post/ci-cd/","publishdate":"2022-05-06T00:01:00Z","relpermalink":"/post/ci-cd/","section":"post","summary":"Занимаясь разработкой, вы наверняка сталкивались с понятиями непрерывной интеграции, доставки и развертывания (или CI/CD). Это технологии, позволяющие ускорить процесс выпуска ПО за счет более коротких циклов обратной связи и автоматизации рутинных задач. Они играют ключевую роль в реализации принципа Agile о важности частого выпуска работающего ПО.","tags":["CI/CD","DevOps"],"title":"Непрерывная интеграция, доставка и развертывание (CI/CD)","type":"post"},{"authors":[],"categories":[],"content":"Progect Citadel  Info Информация будет добавлена позже\n","date":1549324800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1549324800,"objectID":"0e6de1a61aa83269ff13324f3167c1a9","permalink":"https://example.com/slides/example/","publishdate":"2019-02-05T00:00:00Z","relpermalink":"/slides/example/","section":"slides","summary":"An introduction to using Wowchemy's Slides feature.","tags":[],"title":"Slides","type":"slides"},{"authors":["Тараканов Борис","Robert Ford"],"categories":null,"content":" Click the Cite button above to demo the feature to enable visitors to import publication metadata into their reference management software.    Create your slides in Markdown - click the Slides button to check out the example.   Supplementary notes can be added here, including code, math, and images.\n","date":1372636800,"expirydate":-62135596800,"kind":"page","lang":"en","lastmod":1372636800,"objectID":"ff6a19061a984819d30c916886db56ef","permalink":"https://example.com/publication/example/","publishdate":"2017-01-01T00:00:00Z","relpermalink":"/publication/example/","section":"publication","summary":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis posuere tellus ac convallis placerat. Proin tincidunt magna sed ex sollicitudin condimentum.","tags":[],"title":"An example conference paper","type":"publication"}]