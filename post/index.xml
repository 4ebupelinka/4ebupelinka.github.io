<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts | Academic</title>
    <link>https://example.com/post/</link>
      <atom:link href="https://example.com/post/index.xml" rel="self" type="application/rss+xml" />
    <description>Posts</description>
    <generator>Wowchemy (https://wowchemy.com)</generator><language>en-us</language><lastBuildDate>Fri, 27 May 2022 00:00:00 +0000</lastBuildDate>
    <image>
      <url>https://example.com/media/icon_hu0b7a4cb9992c9ac0e91bd28ffd38dd00_9727_512x512_fill_lanczos_center_3.png</url>
      <title>Posts</title>
      <link>https://example.com/post/</link>
    </image>
    
    <item>
      <title>Пост по прошлой неделе</title>
      <link>https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-4/</link>
      <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-4/</guid>
      <description>&lt;h2 id=&#34;что-такое-файл-конфигурации&#34;&gt;Что такое файл конфигурации?&lt;/h2&gt;
&lt;p&gt;Файлы конфигурации - текстовые файлы, содержащие настройки свойств для настройки игрового процесса или поведения движка.&lt;/p&gt;
&lt;h2 id=&#34;для-чего-используют-файлы-конфигурации&#34;&gt;Для чего используют файлы конфигурации?&lt;/h2&gt;
&lt;p&gt;Файлы конфигурации можно использовать для установки значений свойств, которые будут инициализированы при загрузке проекта. Конфигурация определяется парами ключ-значение, расположенными в разделах. Одно или несколько значений могут быть связаны с данным ключом.&lt;/p&gt;
&lt;p&gt;Файлы конфигурации механизма используются для значений объектов и переменных по умолчанию. Конфигурация пользовательского ввода может использоваться для привязки клавиш. По умолчанию файлы DefaultEngine.ini и DefaultGame.ini создаются при создании нового пустого проекта с помощью Мастера проектов . Новые проекты, начинающиеся с шаблонов, могут также создавать файлы конфигурации DefaultEditor.ini и DefaultInput.ini, если это необходимо.&lt;/p&gt;
&lt;h2 id=&#34;указание-настраиваемых-переменных&#34;&gt;Указание настраиваемых переменных:&lt;/h2&gt;
&lt;p&gt;Чтобы указать, какие переменные следует считывать из файлов конфигурации, класс, содержащий эти переменные, должен сначала получить спецификатор Config в своем макросе UCLASS.&lt;/p&gt;
&lt;p&gt;Украшение класса спецификатором Config просто указывает, что этот класс может иметь переменные, считанные из файлов конфигурации, и указывает, из каких файлов считываются конфигурации. Чтобы указать конкретную переменную как прочитанную и сохраненную в файле конфигурации, спецификатор Config также должен быть предоставлен макросу UPROPERTY().&lt;/p&gt;
&lt;h2 id=&#34;файлы-конфигурации-и-наследование&#34;&gt;Файлы конфигурации и наследование:&lt;/h2&gt;
&lt;p&gt;Спецификаторы Config, UCLASS и UPROPERTY наследуются. Это означает, что дочерний класс может либо считывать, либо сохранять все переменные, указанные как Config в родительском классе, и они будут в той же категории файла конфигурации. Все переменные будут находиться под заголовком раздела с именем дочернего класса. Например, информация файла конфигурации для ChildExampleClass, который наследуется от приведенного выше класса ExampleClass, будет выглядеть как следующие строки и сохраняться в тех же файлах конфигурации игры.&lt;/p&gt;
&lt;h2 id=&#34;конфигурации-для-каждого-экземпляра&#34;&gt;Конфигурации для каждого экземпляра:&lt;/h2&gt;
&lt;p&gt;Каждая категория конфигурации имеет свою собственную иерархию файлов, в которых указаны конфигурации для конкретного движка, проекта и платформы.&lt;/p&gt;
&lt;p&gt;Категории конфигурации:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Compat&lt;/li&gt;
&lt;li&gt;DeviceProfiles&lt;/li&gt;
&lt;li&gt;Editor&lt;/li&gt;
&lt;li&gt;EditorGameAgnostic&lt;/li&gt;
&lt;li&gt;EditorKeyBindings&lt;/li&gt;
&lt;li&gt;EditorUserSettings&lt;/li&gt;
&lt;li&gt;Engine&lt;/li&gt;
&lt;li&gt;Game&lt;/li&gt;
&lt;li&gt;Input&lt;/li&gt;
&lt;li&gt;Lightmass&lt;/li&gt;
&lt;li&gt;Scalability&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;иерархия-файлов&#34;&gt;Иерархия файлов:&lt;/h2&gt;
&lt;p&gt;Иерархия файла конфигурации считывается, начиная с Base.ini, при этом значения в более поздних файлах иерархии переопределяют более ранние значения. Все файлы в папке Engine будут применяться ко всем проектам, а настройки для конкретных проектов должны находиться в файлах в каталоге проекта. Наконец, все различия, специфичные для проекта и платформы, сохраняются в [ProjectDirectory]/Saved/Config/[Platform]/[Category].ini.&lt;/p&gt;
&lt;p&gt;Приведенный ниже пример файловой иерархии относится к категории файлов конфигурации Engine.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Engine/Config/Base.ini&lt;/li&gt;
&lt;li&gt;Engine/Config/BaseEngine.ini&lt;/li&gt;
&lt;li&gt;Engine/Config/[Platform]/base[Platform]Engine.ini&lt;/li&gt;
&lt;li&gt;[ProjectDirectory]/Config/DefaultEngine.ini&lt;/li&gt;
&lt;li&gt;Engine/Config/[Platform]/[Platform]Engine.ini&lt;/li&gt;
&lt;li&gt;[ProjectDirectory]/Config/[Platform]/[Platform]Engine.ini&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&#34;комментарии&#34;&gt;Комментарии:&lt;/h2&gt;
&lt;p&gt;У большинства людей сложилось впечатление, что точка с запятой обозначает комментарии в файлах конфигурации, но это не так (FConfigFile::ProcessInputFileContents на самом деле не рассматривает их или любую другую строку как разделитель комментариев). Такое поведение является преднамеренным. Технически любой символ может представлять другую пару ключ-значение. Обычно точка с запятой ставится в начале новой строки. Это работает как комментарий, но на самом деле это не так.&lt;/p&gt;
&lt;h2 id=&#34;итоги-работы&#34;&gt;Итоги работы&lt;/h2&gt;
&lt;p&gt;По итогу работы я познакомился с файлами конфигурации и методами работы с ними.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2022-present &lt;a href=&#34;https://4ebupelinka.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Борис Тараканов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Языки научного программирования.</title>
      <link>https://example.com/post/%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8-%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/</link>
      <pubDate>Fri, 27 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D1%8F%D0%B7%D1%8B%D0%BA%D0%B8-%D0%BD%D0%B0%D1%83%D1%87%D0%BD%D0%BE%D0%B3%D0%BE-%D0%BF%D1%80%D0%BE%D0%B3%D1%80%D0%B0%D0%BC%D0%BC%D0%B8%D1%80%D0%BE%D0%B2%D0%B0%D0%BD%D0%B8%D1%8F/</guid>
      <description>&lt;h2 id=&#34;теория-и-практика&#34;&gt;Теория и практика:&lt;/h2&gt;
&lt;p&gt;В математике, как и в любой другой науке, любые теоремы и теории требуют доказательств. Как пример: Теорема Пифагора. Сначала идет теория, а за ней практика. В программировании такого подхода не придерживаются уже несколько десятков лет. Всё заменено догмами и мнением отдельных личностей, которых иногда называют «евангелистами» или «пророками». Они своим словоблудием продвигают в массы только нужные им идеи, не заботясь ни о теории, ни о доказательствах (Посмотрите конференции и презентации по ИТ). Где здесь наука, а где религия? И не скатываемся ли мы в мракобесие и веру в слова написанные давно и не требующих доказательств? Слышали про сторонников плоской Земли? Ничего не напоминает по части подходов по убеждению и упоротости?&lt;/p&gt;
&lt;p&gt;И вот в таком кураже последние 30-40 лет программисты, ослепленные религиозными убеждениями от проповедников ООП или ФП, строили абстракции поверх других абстракций, новые языки поверх других языков, новые фреймворки и библиотеки поверх старых. А зачем это все было нужно? Ради упрощения и производительности своей работы по написанию программ. Только этот путь привел в тупик. Потому что вместо упрощения получили усложнение и изучение теперь не алгоритмов, а API и документации к очередному модному фреймворку, а может и нескольким. Теперь баги стали искать не только в своем коде, но и в чужом. Отладку кода приходится делать через тонны прокси, паттернов архитектуры и шаблонов проектирования, хелперов, фреймворков и библиотек. И, как показывают исследования, выигрыша в скорости написания кода от применения ООП нет вообще.&lt;/p&gt;
&lt;h2 id=&#34;немного-истории&#34;&gt;Немного истории:&lt;/h2&gt;
&lt;p&gt;С чего всё началось? Сначала было процедурное программирование, затем структурное и за ним на сцену вышло императивное программирование. Некоторые люди додумались ввести понятие объекта — так родилось обьектно-ориентированное программирование. И в этот момент произошел крутой поворот повернувший всю индустрию в то состояние, в котором мы сейчас находимся.&lt;/p&gt;
&lt;h2 id=&#34;примеры-научного-подхода&#34;&gt;Примеры научного подхода:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;книга «Электронные цифровые машины и программирование» А.И. Китова.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;теорема Бёма — Якопини.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Не так много как хотелось бы, и, возможно, где-то есть еще много примеров научных работ, но их найти очень сложно. Подавляющее большинство пользуется всякими «библиями» и статьями для аргументации и дискуссий(в реальности это даже слишком громкое слово для этого процесса).&lt;/p&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;Языки научного программирования остаются не просто актуальными, но и востребованными в наше непростое время.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2022-present &lt;a href=&#34;https://4ebupelinka.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Борис Тараканов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошлой неделе</title>
      <link>https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-3/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-3/</guid>
      <description>&lt;h2 id=&#34;о-виджетах&#34;&gt;О виджетах:&lt;/h2&gt;
&lt;p&gt;Виджет (widget) — это элемент UI, предоставляющий UI визуальные функции. Например, виджет Button предоставляет объект, который пользователь может видеть и нажимать на него.
Сам виджет необязательно должен быть видимым. Например, виджет Grid Panel равномерно разделяет своё пространство между его содержимым. Пользователь не может увидеть Grid Panel, но видит его воздействие.
Можно даже создать виджет, являющийся целым интерфейсом, например, экраном меню. Ниже представлен пример виджета, созданного так, чтобы он выглядел как начальный экран игры. Все элементы UI тоже являются виджетами и содержатся внутри виджета начального экрана.&lt;/p&gt;
&lt;h2 id=&#34;создание-виджета&#34;&gt;Создание виджета:&lt;/h2&gt;
&lt;p&gt;Перейдем в Content Browser и найдем папку UI. Нажмем на кнопку Add New и выберем User Interface\Widget Blueprint. Переименуем новый ассет в WBP_HUD.&lt;/p&gt;
&lt;h2 id=&#34;umg-ui-designer&#34;&gt;UMG UI Designer:&lt;/h2&gt;
&lt;p&gt;UMG UI Designer состоит из семи основных элементов:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Designer: в этой области представлено визуальное отображение виджета. Перемещаться по ней можно зажав правую клавишу мыши и двигая мышью. Масштабирование выполняется прокруткой колёсика мыши.&lt;/li&gt;
&lt;li&gt;Details: здесь отображаются свойства выбранного виджета&lt;/li&gt;
&lt;li&gt;Palette: список всех виджетов, которые можно использовать. Все созданные пользователем виджеты тоже появляются здесь.&lt;/li&gt;
&lt;li&gt;Hierarchy: список всех уже используемых виджетов&lt;/li&gt;
&lt;li&gt;Animations: некоторые свойства виджетов могут иметь анимацию, например, расположение и размер. В этой панели перечислены все анимации.&lt;/li&gt;
&lt;li&gt;Timeline: при выборе анимации на этой панели показываются анимированные свойства и ключевые кадры&lt;/li&gt;
&lt;li&gt;Editor Mode: здесь можно переключаться между режимами Designer и Graph. Режим Graph почти аналогичен Event Graph у Blueprint.&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;привязки&#34;&gt;Привязки:&lt;/h2&gt;
&lt;p&gt;Точка привязки задаёт место, относительно которого определяется положение виджета. По умолчанию виджеты привязаны к верхнему левому углу своего родительского элемента. Поэтому когда мы задаём положение виджета, мы на самом деле указывает положение относительно этой точки привязки.
Заметьте, что каждое изображение сохраняет положение относительно своей привязки. Благодаря привязкам UI будет иметь одинаковое расположение при разных размерах экрана.
Также можно использовать привязки для автоматического изменения размера виджетов. В случае привязки к двум или более точкам виджет будет менять свой размер для сохранения относительного размера.&lt;/p&gt;
&lt;h2 id=&#34;отображение-hud&#34;&gt;Отображение HUD:&lt;/h2&gt;
&lt;p&gt;Нажмем на Compile, а затем вернемся в основной редактор. Перейдем в папку Blueprints и дважды щёлкнем на BP_GameManager, чтобы открыть его.
HUD должен становиться видимым после запуска игры. Для этого можно использовать нод Event BeginPlay.
Найдем нод Event BeginPlay и добавим нод Create Widget в конец цепочки нодов. Этот нод создаёт экземпляр указанного виджета.
Нажмем на раскрывающийся список рядом с Class и выберем WBP_HUD.&lt;/p&gt;
&lt;p&gt;Давайте разберёмся с порядком событий:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Когда Unreal спаунит BP_GameManager, выполняются функции Restart и SetUpCamera. Эти функции настраивают несколько переменных и камеру. Если вы не знаете, что такое функция, то не волнуйтесь, скоро мы их рассмотрим.&lt;/li&gt;
&lt;li&gt;Нод Create Widget создаёт экземпляр WBP_HUD&lt;/li&gt;
&lt;li&gt;Нод Add to Viewport отображает WBP_HUD&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;итоги-работы&#34;&gt;Итоги работы&lt;/h2&gt;
&lt;p&gt;По итогам работы я научился следующему:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Создавать HUD-дисплей, на котором отображается счётчик и таймер&lt;/li&gt;
&lt;li&gt;Отображать HUD на экране&lt;/li&gt;
&lt;li&gt;Обновлять счётчик и таймер, чтобы отображать значения переменных&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2022-present &lt;a href=&#34;https://4ebupelinka.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Борис Тараканов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Создание презентаций</title>
      <link>https://example.com/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/</link>
      <pubDate>Thu, 19 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D1%81%D0%BE%D0%B7%D0%B4%D0%B0%D0%BD%D0%B8%D0%B5-%D0%BF%D1%80%D0%B5%D0%B7%D0%B5%D0%BD%D1%82%D0%B0%D1%86%D0%B8%D0%B8/</guid>
      <description>&lt;h2 id=&#34;самые-частые-ошибки-выступающих&#34;&gt;Самые частые ошибки выступающих:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Говорить о себе. Кажется, что чем больше выставить наград, тем весомее будет презентация. Но это не так — сплошные регалии и достижения только утомляют. Расскажите о себе ровно столько, чтобы люди поняли, почему вам можно доверять.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Навязчивость. Чтобы привлечь внимание, в ход идут пошлые картинки и мемы. Да, секс и коты привлекают, но то ли это внимание, которое вам нужно? Лучше будьте конкретны: цифры, графики и изображения продукта привлекают не меньше и к тому же точнее раскрывают тему. Если работаете на сцене, возьмите с собой что-то интересное. Например, Стив Джобс как-то вынес на сцену конверт, в котором оказался Macbook Air.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;«Я хочу вас развлечь». Дальше обычно идет забавная история и шутки. Но это тупо и не работает на тему. Лучше пообещайте аудитории что-то весомое, расскажите, какие новые знания и умения они получат к концу выступления. После такого обещания люди станут внимательнее, потому что им действительно хочется получить обещанное.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;правило-третей&#34;&gt;Правило третей&lt;/h2&gt;
&lt;p&gt;Это правило создания презентаций помогает расположить объекты на слайде так, чтобы глаз сразу выделял самое важное. Разделите слайд на трети вдоль и поперек. Значимые объекты располагайте на пересечениях. Значимые объекты — это заголовки и иллюстрации.&lt;/p&gt;
&lt;h2 id=&#34;зачем-делать-презентации&#34;&gt;Зачем делать презентации?&lt;/h2&gt;
&lt;p&gt;Презентации делают не только менеджеры на совещаниях. Это полезный навык, который помогает продать, убедить и научить. С помощью них стартаперы соблазняют инвесторов, агенты презентуют актеров, а няни самих себя. Красивая презентация — это сильный инструмент с долгосрочным эффектом. Хорошую речь помнят, а хорошую презентацию хранят на компьютере.&lt;/p&gt;
&lt;h2 id=&#34;выводы&#34;&gt;Выводы&lt;/h2&gt;
&lt;p&gt;создание презентаций является неотъемлимой частью проектной деятельности, и, зачатую, от качества презентации зависит результат всей работы.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2022-present &lt;a href=&#34;https://4ebupelinka.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Борис Тараканов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошлой неделе</title>
      <link>https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-2/</link>
      <pubDate>Sat, 14 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-2/</guid>
      <description>&lt;h2 id=&#34;что-такое-wm&#34;&gt;Что такое WM?&lt;/h2&gt;
&lt;p&gt;World Machine помогает создавать реалистичные 3D-рельефы. Мощная и гибкая программа World Machine сочетает процедурное создание рельефа, моделирование природы и интерактивное редактирование для быстрого и простого создания реалистичного рельефа. Вы можете создавать и экспортировать поля высот, текстуры и сетки высокого разрешения для игр или программ рендеринга.&lt;/p&gt;
&lt;h2 id=&#34;почему-именно-wm&#34;&gt;Почему именно WM?&lt;/h2&gt;
&lt;p&gt;Несмотря на то что игровой движок, который я использую, имеет встроенные средства для создания и редактирования ландшафта, они подразумевают использование вручную, что неэффективно в контексте создания цельного игрового мира, имеющего размеры порядка 60 квадратных километров. Так же имеются программы аналогичные данной, но WM является наиболее узнаваемой, в силу чего для нее легче найти инструкции по использованию.&lt;/p&gt;
&lt;h2 id=&#34;как-это-устроено&#34;&gt;Как это устроено?&lt;/h2&gt;
&lt;p&gt;В отличие от традиционных редакторов рельефа на основе кистей, World Machine использует процедурный подход. Формируйте рельеф, используя основные строительные блоки, такие как фракталы, затем дополните их симуляцией природы, чтобы создать реалистичные черты.
Просто соедините вместе блоки действий, чтобы создать свой мир.
Вот великолепный пейзаж, созданный менее чем за две минуты.&lt;/p&gt;
&lt;h2 id=&#34;итоги-работы&#34;&gt;Итоги работы&lt;/h2&gt;
&lt;p&gt;За прошлую неделю я изучил основные возможности программы World Machine, в том числе:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Использование нод шума для создания основы ландшафта&lt;/li&gt;
&lt;li&gt;Использование инструмента Layout Generator&lt;/li&gt;
&lt;li&gt;Использование инструментов: эррозия, кривые, комбинирование, фильтры.&lt;/li&gt;
&lt;li&gt;Экспорт карт высот и текстур в заданном разрешении&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2022-present &lt;a href=&#34;https://4ebupelinka.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Борис Тараканов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Markdown</title>
      <link>https://example.com/post/markdown/</link>
      <pubDate>Fri, 13 May 2022 00:01:00 +0000</pubDate>
      <guid>https://example.com/post/markdown/</guid>
      <description>&lt;h2 id=&#34;история&#34;&gt;История&lt;/h2&gt;
&lt;p&gt;Первоначально создан в 2004 году Джоном Грубером и Аароном Шварцем. Многие идеи языка были позаимствованы из существующих соглашений по разметке текста в электронных письмах. Реализации языка Markdown преобразуют текст в формате Markdown в валидный, правильно построенный XHTML и заменяют левые угловые скобки («&amp;lt;») и амперсанды («&amp;amp;») на соответствующие коды сущностей. Первой реализацией Markdown стала написанная Грубером реализация на Perl, однако спустя некоторое время появилось множество реализаций от сторонних разработчиков (см. ниже). Реализация на Perl распространяется по лицензии типа BSD. Реализации Markdown на различных языках программирования включены (или доступны в качестве плагина) во многие системы управления содержимым.&lt;/p&gt;
&lt;h2 id=&#34;реализации-markdown&#34;&gt;Реализации Markdown&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;C#&lt;/li&gt;
&lt;li&gt;C&lt;/li&gt;
&lt;li&gt;ColdFusion&lt;/li&gt;
&lt;li&gt;Common Lisp&lt;/li&gt;
&lt;li&gt;Go&lt;/li&gt;
&lt;li&gt;Haskell&lt;/li&gt;
&lt;li&gt;Java&lt;/li&gt;
&lt;li&gt;JavaScript&lt;/li&gt;
&lt;li&gt;Kotlin&lt;/li&gt;
&lt;li&gt;Lua&lt;/li&gt;
&lt;li&gt;newLISP&lt;/li&gt;
&lt;li&gt;Perl&lt;/li&gt;
&lt;li&gt;PHP&lt;/li&gt;
&lt;li&gt;Python&lt;/li&gt;
&lt;li&gt;Ruby&lt;/li&gt;
&lt;li&gt;Scala&lt;/li&gt;
&lt;li&gt;Tcl&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;расширения&#34;&gt;Расширения&lt;/h2&gt;
&lt;p&gt;Приведённые ниже приложения реализуют Markdown, расширяя его синтаксис дополнительной функциональностью:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;MultiMarkdown (C)&lt;/li&gt;
&lt;li&gt;Text::MultiMarkdown (Perl) модуль, реализующий расширение MultiMarkdown&lt;/li&gt;
&lt;li&gt;PHP Markdown Extra&lt;/li&gt;
&lt;li&gt;python-markdown2 (Поддерживает некоторые расширения PHP Markdown)&lt;/li&gt;
&lt;li&gt;python-markdown (Имеет систему расширений для добавления нового синтаксиса)&lt;/li&gt;
&lt;li&gt;Markout (Java)&lt;/li&gt;
&lt;li&gt;Pegdown (Java)&lt;/li&gt;
&lt;li&gt;Maruku (Ruby)&lt;/li&gt;
&lt;li&gt;Pandoc (Haskell)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;поддержка-текстовыми-редакторами&#34;&gt;Поддержка текстовыми редакторами:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;Универсальные редакторы: TextMate, BBEdit (с версии 8.6), Vim (с помощью специального пользовательского режима, написанного Беном Вильямсом), Emacs(с помощью специального пользовательского режима, написанного Джейсоном Блевинсом), TextWrangler, Smultron, Sublime Text, Geany, Atom, Visual Studio Code.&lt;/li&gt;
&lt;li&gt;Редакторы для блогов: Ecto, MarsEdit&lt;/li&gt;
&lt;li&gt;Плагины для редактора среды Eclipse от ThinkTank Mathematics&lt;/li&gt;
&lt;li&gt;Плагины для текстового редактора gedit&lt;/li&gt;
&lt;li&gt;Текстовый редактор iA Writer в версии для Mac OS и Android&lt;/li&gt;
&lt;li&gt;Текстовый редактор ReText для GNU/Linux&lt;/li&gt;
&lt;li&gt;WYSIWYM-редактор Texts для Windows/Mac OS&lt;/li&gt;
&lt;li&gt;WYSIWYM-редактор Typora для Windows, GNU/Linux и Mac OS&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2022-present &lt;a href=&#34;https://4ebupelinka.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Борис Тараканов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Пост по прошлой неделе</title>
      <link>https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-1/</link>
      <pubDate>Sat, 07 May 2022 00:00:00 +0000</pubDate>
      <guid>https://example.com/post/%D0%BF%D0%BE%D1%81%D1%82-%D0%BF%D0%BE-%D0%BF%D1%80%D0%BE%D1%88%D0%BB%D0%BE%D0%B8-%D0%BD%D0%B5%D0%B4%D0%B5%D0%BB%D0%B5-1/</guid>
      <description>&lt;h2 id=&#34;что-такое-rvt&#34;&gt;Что такое RVT?&lt;/h2&gt;
&lt;p&gt;Runtime Virtual Texture (RVT) создает свои текстурные данные по требованию с помощью GPU во время выполнения и работает аналогично традиционному текстурированию. RVT кэширует данные о затенении на больших площадях, что делает их подходящими для затенения ландшафта, где используются материалы, похожие на декали, и сплайны, которые хорошо подходят для соответствия рельефу.&lt;/p&gt;
&lt;h2 id=&#34;для-настройки-и-использования-виртуального-текстурирования-среды-выполнения-в-проекте-выполните-следующие-высокоуровневые-действия-&#34;&gt;Для настройки и использования виртуального текстурирования среды выполнения в проекте выполните следующие высокоуровневые действия: :&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Создайте виртуальный текстурный ресурс (ы) среды выполнения в браузере содержимого. Он используется для связи всех компонентов (актеров, тома RVT и материалов RVT) вместе для рендеринга виртуальной текстуры среды выполнения.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Добавьте виртуальный текстурный том среды выполнения в сцену с панели Режимы. Это используется для размещения актива RVT в сцене.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Настройте свои материалы для записи в ресурс RVT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Настройте материалы для отбора проб из актива RVT.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Настройте один или несколько примитивов или ландшафтных актеров для рендеринга в актив RVT.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;зачем-нужны-виртуальные-текстуры-реального-времени&#34;&gt;Зачем нужны виртуальные текстуры реального времени?&lt;/h2&gt;
&lt;p&gt;Данный вид текстур используется в частности для создание правдоподобного окружения в игровом мире, так как позволяет сгладить преход можду текступой ланшафта и текстурой объекта, например камня. Так же виртруальные текстуры реального времени можно использовать для создания поверхности ланшафта, реагируещей на другие объекты (например снег, который приминается под ногой игрового персоонажа), использование именно метода RVT для данной задачи, является выигрышным со стороны производиительности, потому что не создается полигональная сетка высокой плотности, нагружающая систему, а взаимодействие происходит на уровне ландшафта.&lt;/p&gt;
&lt;h2 id=&#34;итоги-работы&#34;&gt;Итоги работы&lt;/h2&gt;
&lt;p&gt;Мне удалось создать и настроить RVT для создания правдоподобного окружения(Плавный переход текстуры ландшафта в текстуру камня, зозданного методом 3D сканирования), в будущем я планирую использовать RVT для создания ландшафтного материала, реагирующего на действия игрока, в частности снег и грязь.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2022-present &lt;a href=&#34;https://4ebupelinka.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Борис Тараканов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Непрерывная интеграция, доставка и развертывание (CI/CD)</title>
      <link>https://example.com/post/ci-cd/</link>
      <pubDate>Fri, 06 May 2022 00:01:00 +0000</pubDate>
      <guid>https://example.com/post/ci-cd/</guid>
      <description>&lt;h2 id=&#34;что-такое-непрерывная-интеграция&#34;&gt;Что такое непрерывная интеграция?&lt;/h2&gt;
&lt;p&gt;Непрерывная интеграция подразумевает выполнение традиционных шагов по интеграции прямо в ходе процесса разработки — не дожидаясь завершения работы над кодом, сбора всей системы воедино и тестирования.&lt;/p&gt;
&lt;p&gt;Предположим, что над разработкой вашего продукта работает больше одного человека — это типично для большинства коммерческого ПО и проектов с открытым исходным кодом. В какой-то момент вы захотите собрать по кусочкам все, над чем трудились ваши разработчики, и проверить, что конечный результат соответствует ожиданиям. Непрерывная интеграция предполагает, что это происходит раз в день, а то и чаще.&lt;/p&gt;
&lt;p&gt;И ясно почему. Если вы отложите интеграцию до момента готовности кода, то, чтобы собрать решение (и тем более — достичь желаемой работоспособности), вам скорей всего придется долго раскраивать и переписывать различные фрагменты кода. Код — вещь сложная. Даже если он тщательно продуман заранее, вы едва ли будете знать наверняка, как выстроится логическое взаимодействие и будут ли ошибки. Чем больше кода, тем выше сложность и тем больше всего приходится раскраивать, когда что-то не работает.&lt;/p&gt;
&lt;p&gt;С непрерывной интеграцией разработчики регулярно публикуют свои изменения, делая коммиты в систему контроля версий хотя бы раз в день, и проверяют, что сборка с их изменениями проходит все тесты. В таком случае, если что-то сломается, для нахождения проблемы вам нужно будет проанализировать небольшое количество изменений. Быстрое получение результатов также означает, что вам будет легче вносить исправления: контекст задачи будет по-прежнему свеж в голове.&lt;/p&gt;
&lt;h2 id=&#34;о-непрерывной-доставке&#34;&gt;О непрерывной доставке:&lt;/h2&gt;
&lt;p&gt;Непрерывная доставка основывается на автоматизации сборки и тестирования, которую вводит непрерывная интеграция. Она предполагает перевод ручных шагов, необходимых для выпуска сборки приложения в продакшн, — в автоматизированный процесс.&lt;/p&gt;
&lt;p&gt;Раньше работа могла передаваться от разработчиков тестировщикам, а затем релиз-менеджерам. Внедряя непрерывную доставку, ваша команда (включающая самых разных специалистов) начинает полностью управлять процессами сборки, тестирования и релиза своего продукта. У такого подхода есть ряд преимуществ:&lt;/p&gt;
&lt;p&gt;Избегая традиционной разобщенности, ваша команда будет лучше понимать бизнес-потребности и операционные нужды, возникающие при доставке продукта пользователям.
Это в свою очередь позволяет привнести некоторые практики разработки в процесс, который принято считать ручным и довольно длительным.
Применение автоматизации не только ускоряет процесс доставки, но и снижает вероятность возникновения ошибок, делая его более стабильным и надежным.&lt;/p&gt;
&lt;p&gt;То, из каких шагов состоит процедура доставки приложения и каких стадий пайплайна они требуют, зависит от нужд вашего бизнеса и пользователей. Распространенной практикой является развертывание приложения хотя бы в одном препродакшн-окружении перед окончательным выпуском.&lt;/p&gt;
&lt;p&gt;Это может быть тестовое окружение, предназначенное для дополнительных видов тестирования (безопасности, производительности, нагрузки); это могут быть песочницы (изолированные среды), с помощью которых команды поддержки и продаж знакомятся с новой функциональностью; также это могут быть окружения для приемочного тестирования, где QA-команда и специалисты по продукту проверяют ПО на соответствие требованиям.&lt;/p&gt;
&lt;h2 id=&#34;о-непрерывном-развертывании&#34;&gt;О непрерывном развертывании:&lt;/h2&gt;
&lt;p&gt;Непрерывное развертывание завершает логическую цепочку из практик непрерывной интеграции и доставки: если сборка успешно проходит все предыдущие стадии пайплайна, она автоматически выпускается в продакшн. А значит, как только выполненные изменения проходят все тесты, — они становятся доступными для пользователя. Непрерывное развертывание ускоряет цикл обратной связи, начинающийся с изменений в коде и заканчивающийся поступлением их в продакшн, и дает команде возможность своевременно проверять, как их изменения поведут себя в реальном мире, не рискуя качеством.&lt;/p&gt;
&lt;p&gt;Непрерывное развертывание подойдет не любому продукту и не любой организации. Однако имеет смысл рассмотреть шаги, которые оно включает, поскольку каждый из них способен нести ценность сам по себе:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Будьте уверены в своих тестах. Для автоматического развертывания в продакшне вы должны быть твердо уверенными в вашем пайплайне, в частности, в автоматизированных тестах. Необходима культура тестирования, где команда инвестирует в тестовое покрытие и производительность, отдает более высокий приоритет исправлению проблем сборок и пайплайнов, а уж потом занимается разработкой новой функциональности.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Выбирайте, что релизить. Новички часто возражают, что, если разработчики будут делать коммиты рано и часто и изменения не будут проверяться вручную, то пользователи будут получать недоделанную функциональность, которая еще не готова к использованию. Чтобы не упускать преимущества непрерывной интеграции, вместо веток вы можете использовать флаги функций. Так вы сможете контролировать, какие возможности видны пользователю, а какие скрыты, и спокойно продолжать разработку.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Контролируйте выпуск. Непрерывное развертывание предполагает, что релиз происходит автоматически при условии, что все предыдущие этапы прошли проверку. Но это не значит, что у вас не будет контроля за происходящим. Есть различные технологии, позволяющие минимизировать риски и управлять выпуском. Canary-релизы дают возможность тестировать продукт на небольшой доле пользователей, а сине-зеленое развертывание позволяет управлять переходом на новую версию.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Следите за продакшном. Даже при наличии вышеперечисленных мер непрерывное развертывание может казаться довольно рискованной практикой. Что если тестирование не выявит ошибку и она проявится в продакшне? Время, деньги, репутация — все это ставится на карту. Та же проблема может возникнуть и при ручном развертывании, однако ничто не подорвет уверенность ваших стейкхолдеров больше, чем шоустоппер, выпущенный некой системой автоматически. Решающую роль здесь играет то, занимаетесь ли вы активным поиском проблем или же просто ждете, пока вам поступят отчеты об ошибках. Мониторинг статистики на предмет любых отклонений от нормы (выполняемый, в частности, сразу после релиза) поможет выявить проблемы до того, как их заметит пользователь.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Оптимизируйте пайплайн. В случае, если в продакшне что-то пойдет не так, хотелось бы иметь возможность действовать быстро. В некоторых случаях вы сможете откатиться к предыдущий версии. Однако зачастую вещи обстоят чуть сложнее. Миграции баз данных и исправления ошибок может быть сложно откатить, и тогда вам придется чинить проблему. Пропуск шагов пайплайна — экономия, но ложная, так как вы, скорей всего, пропустите другие проблемы, которые могли бы выявить тесты. Вместо этого лучше инвестировать в оптимизацию вашего пайплайна: в ускорение сборок, повышение производительности тестов и пр. Это позволит при необходимости быстрее делать развертывание изменений, а также ускорит циклы обратной связи для всего процесса.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Непрерывная интеграция, доставка и развертывание служат одной цели — частому выпуску работающего ПО. Понемногу и часто — использование этого подхода для интеграции и релиза делает процесс более управляемым, а выполняя шаги регулярно, команды учатся делать это все лучше и лучше.&lt;/p&gt;
&lt;p&gt;Применение автоматизации не только ускоряет процесс, но делает его более надежным. Каждый шаг пайплайна строится на основе предыдущего — вы можете выбирать для себя нужное количество шагов и надстраивать их при необходимости.&lt;/p&gt;
&lt;h2 id=&#34;license&#34;&gt;License&lt;/h2&gt;
&lt;p&gt;Copyright 2022-present &lt;a href=&#34;https://4ebupelinka.github.io/&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;Борис Тараканов&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Released under the &lt;a href=&#34;https://github.com/wowchemy/wowchemy-hugo-modules/blob/master/LICENSE.md&#34; target=&#34;_blank&#34; rel=&#34;noopener&#34;&gt;MIT&lt;/a&gt; license.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
